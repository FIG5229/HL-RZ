<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.integration.generator.dao.IomCiRltNodeMapper">
  <resultMap id="BaseResultMap" type="com.integration.generator.entity.IomCiRltNode">
    <id column="ID" jdbcType="DECIMAL" property="id" />
    <result column="RULE_ID" jdbcType="DECIMAL" property="ruleId" />
    <result column="RLT_TYPE" jdbcType="INTEGER" property="rltType" />
    <result column="NODE_TYPE" jdbcType="INTEGER" property="nodeType" />
    <result column="NODE_LOGIC" jdbcType="INTEGER" property="nodeLogic" />
    <result column="TYPE_ID" jdbcType="DECIMAL" property="typeId" />
    <result column="NODE_TYPE_ID" jdbcType="DECIMAL" property="nodeTypeId" />
    <result column="PAGE_NODE_ID" jdbcType="DECIMAL" property="pageNodeId" />
    <result column="X" jdbcType="DECIMAL" property="x" />
    <result column="Y" jdbcType="DECIMAL" property="y" />
    <result column="DOMAIN_ID" jdbcType="INTEGER" property="domainId" />
    <result column="CJSJ" jdbcType="DATE" property="cjsj" />
    <result column="XGSJ" jdbcType="DATE" property="xgsj" />
    <result column="YXBZ" jdbcType="INTEGER" property="yxbz" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    ID, RULE_ID, RLT_TYPE, NODE_TYPE, NODE_LOGIC, TYPE_ID, NODE_TYPE_ID, PAGE_NODE_ID, 
    X, Y, DOMAIN_ID, CJSJ, XGSJ, YXBZ
  </sql>
  <select id="selectByExample" parameterType="com.integration.generator.entity.IomCiRltNodeExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from iom_ci_rlt_node
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from iom_ci_rlt_node
    where ID = #{id,jdbcType=DECIMAL}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from iom_ci_rlt_node
    where ID = #{id,jdbcType=DECIMAL}
  </delete>
  <delete id="deleteByExample" parameterType="com.integration.generator.entity.IomCiRltNodeExample">
    delete from iom_ci_rlt_node
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.integration.generator.entity.IomCiRltNode">
    insert into iom_ci_rlt_node (ID, RULE_ID, RLT_TYPE, 
      NODE_TYPE, NODE_LOGIC, TYPE_ID, 
      NODE_TYPE_ID, PAGE_NODE_ID, X, 
      Y, DOMAIN_ID, CJSJ, XGSJ, 
      YXBZ)
    values (#{id,jdbcType=DECIMAL}, #{ruleId,jdbcType=DECIMAL}, #{rltType,jdbcType=INTEGER}, 
      #{nodeType,jdbcType=INTEGER}, #{nodeLogic,jdbcType=INTEGER}, #{typeId,jdbcType=DECIMAL}, 
      #{nodeTypeId,jdbcType=DECIMAL}, #{pageNodeId,jdbcType=DECIMAL}, #{x,jdbcType=DECIMAL}, 
      #{y,jdbcType=DECIMAL}, #{domainId,jdbcType=INTEGER}, #{cjsj,jdbcType=DATE}, #{xgsj,jdbcType=DATE}, 
      #{yxbz,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.integration.generator.entity.IomCiRltNode">
    insert into iom_ci_rlt_node
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        ID,
      </if>
      <if test="ruleId != null">
        RULE_ID,
      </if>
      <if test="rltType != null">
        RLT_TYPE,
      </if>
      <if test="nodeType != null">
        NODE_TYPE,
      </if>
      <if test="nodeLogic != null">
        NODE_LOGIC,
      </if>
      <if test="typeId != null">
        TYPE_ID,
      </if>
      <if test="nodeTypeId != null">
        NODE_TYPE_ID,
      </if>
      <if test="pageNodeId != null">
        PAGE_NODE_ID,
      </if>
      <if test="x != null">
        X,
      </if>
      <if test="y != null">
        Y,
      </if>
      <if test="domainId != null">
        DOMAIN_ID,
      </if>
      <if test="cjsj != null">
        CJSJ,
      </if>
      <if test="xgsj != null">
        XGSJ,
      </if>
      <if test="yxbz != null">
        YXBZ,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=DECIMAL},
      </if>
      <if test="ruleId != null">
        #{ruleId,jdbcType=DECIMAL},
      </if>
      <if test="rltType != null">
        #{rltType,jdbcType=INTEGER},
      </if>
      <if test="nodeType != null">
        #{nodeType,jdbcType=INTEGER},
      </if>
      <if test="nodeLogic != null">
        #{nodeLogic,jdbcType=INTEGER},
      </if>
      <if test="typeId != null">
        #{typeId,jdbcType=DECIMAL},
      </if>
      <if test="nodeTypeId != null">
        #{nodeTypeId,jdbcType=DECIMAL},
      </if>
      <if test="pageNodeId != null">
        #{pageNodeId,jdbcType=DECIMAL},
      </if>
      <if test="x != null">
        #{x,jdbcType=DECIMAL},
      </if>
      <if test="y != null">
        #{y,jdbcType=DECIMAL},
      </if>
      <if test="domainId != null">
        #{domainId,jdbcType=INTEGER},
      </if>
      <if test="cjsj != null">
        #{cjsj,jdbcType=DATE},
      </if>
      <if test="xgsj != null">
        #{xgsj,jdbcType=DATE},
      </if>
      <if test="yxbz != null">
        #{yxbz,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.integration.generator.entity.IomCiRltNodeExample" resultType="java.lang.Long">
    select count(*) from iom_ci_rlt_node
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update iom_ci_rlt_node
    <set>
      <if test="record.id != null">
        ID = #{record.id,jdbcType=DECIMAL},
      </if>
      <if test="record.ruleId != null">
        RULE_ID = #{record.ruleId,jdbcType=DECIMAL},
      </if>
      <if test="record.rltType != null">
        RLT_TYPE = #{record.rltType,jdbcType=INTEGER},
      </if>
      <if test="record.nodeType != null">
        NODE_TYPE = #{record.nodeType,jdbcType=INTEGER},
      </if>
      <if test="record.nodeLogic != null">
        NODE_LOGIC = #{record.nodeLogic,jdbcType=INTEGER},
      </if>
      <if test="record.typeId != null">
        TYPE_ID = #{record.typeId,jdbcType=DECIMAL},
      </if>
      <if test="record.nodeTypeId != null">
        NODE_TYPE_ID = #{record.nodeTypeId,jdbcType=DECIMAL},
      </if>
      <if test="record.pageNodeId != null">
        PAGE_NODE_ID = #{record.pageNodeId,jdbcType=DECIMAL},
      </if>
      <if test="record.x != null">
        X = #{record.x,jdbcType=DECIMAL},
      </if>
      <if test="record.y != null">
        Y = #{record.y,jdbcType=DECIMAL},
      </if>
      <if test="record.domainId != null">
        DOMAIN_ID = #{record.domainId,jdbcType=INTEGER},
      </if>
      <if test="record.cjsj != null">
        CJSJ = #{record.cjsj,jdbcType=DATE},
      </if>
      <if test="record.xgsj != null">
        XGSJ = #{record.xgsj,jdbcType=DATE},
      </if>
      <if test="record.yxbz != null">
        YXBZ = #{record.yxbz,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update iom_ci_rlt_node
    set ID = #{record.id,jdbcType=DECIMAL},
      RULE_ID = #{record.ruleId,jdbcType=DECIMAL},
      RLT_TYPE = #{record.rltType,jdbcType=INTEGER},
      NODE_TYPE = #{record.nodeType,jdbcType=INTEGER},
      NODE_LOGIC = #{record.nodeLogic,jdbcType=INTEGER},
      TYPE_ID = #{record.typeId,jdbcType=DECIMAL},
      NODE_TYPE_ID = #{record.nodeTypeId,jdbcType=DECIMAL},
      PAGE_NODE_ID = #{record.pageNodeId,jdbcType=DECIMAL},
      X = #{record.x,jdbcType=DECIMAL},
      Y = #{record.y,jdbcType=DECIMAL},
      DOMAIN_ID = #{record.domainId,jdbcType=INTEGER},
      CJSJ = #{record.cjsj,jdbcType=DATE},
      XGSJ = #{record.xgsj,jdbcType=DATE},
      YXBZ = #{record.yxbz,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.integration.generator.entity.IomCiRltNode">
    update iom_ci_rlt_node
    <set>
      <if test="ruleId != null">
        RULE_ID = #{ruleId,jdbcType=DECIMAL},
      </if>
      <if test="rltType != null">
        RLT_TYPE = #{rltType,jdbcType=INTEGER},
      </if>
      <if test="nodeType != null">
        NODE_TYPE = #{nodeType,jdbcType=INTEGER},
      </if>
      <if test="nodeLogic != null">
        NODE_LOGIC = #{nodeLogic,jdbcType=INTEGER},
      </if>
      <if test="typeId != null">
        TYPE_ID = #{typeId,jdbcType=DECIMAL},
      </if>
      <if test="nodeTypeId != null">
        NODE_TYPE_ID = #{nodeTypeId,jdbcType=DECIMAL},
      </if>
      <if test="pageNodeId != null">
        PAGE_NODE_ID = #{pageNodeId,jdbcType=DECIMAL},
      </if>
      <if test="x != null">
        X = #{x,jdbcType=DECIMAL},
      </if>
      <if test="y != null">
        Y = #{y,jdbcType=DECIMAL},
      </if>
      <if test="domainId != null">
        DOMAIN_ID = #{domainId,jdbcType=INTEGER},
      </if>
      <if test="cjsj != null">
        CJSJ = #{cjsj,jdbcType=DATE},
      </if>
      <if test="xgsj != null">
        XGSJ = #{xgsj,jdbcType=DATE},
      </if>
      <if test="yxbz != null">
        YXBZ = #{yxbz,jdbcType=INTEGER},
      </if>
    </set>
    where ID = #{id,jdbcType=DECIMAL}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.integration.generator.entity.IomCiRltNode">
    update iom_ci_rlt_node
    set RULE_ID = #{ruleId,jdbcType=DECIMAL},
      RLT_TYPE = #{rltType,jdbcType=INTEGER},
      NODE_TYPE = #{nodeType,jdbcType=INTEGER},
      NODE_LOGIC = #{nodeLogic,jdbcType=INTEGER},
      TYPE_ID = #{typeId,jdbcType=DECIMAL},
      NODE_TYPE_ID = #{nodeTypeId,jdbcType=DECIMAL},
      PAGE_NODE_ID = #{pageNodeId,jdbcType=DECIMAL},
      X = #{x,jdbcType=DECIMAL},
      Y = #{y,jdbcType=DECIMAL},
      DOMAIN_ID = #{domainId,jdbcType=INTEGER},
      CJSJ = #{cjsj,jdbcType=DATE},
      XGSJ = #{xgsj,jdbcType=DATE},
      YXBZ = #{yxbz,jdbcType=INTEGER}
    where ID = #{id,jdbcType=DECIMAL}
  </update>
</mapper>